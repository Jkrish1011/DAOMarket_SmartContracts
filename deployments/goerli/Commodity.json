{
  "address": "0x241cE5F30de4c60fD2bFe5bCe8b7c96b6421A1Fd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ValueChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "store",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x776afd52e0f566ea3896b1e11725579e22f5bcc76e3f06439440e0b9fb9d8f83",
  "receipt": {
    "to": null,
    "from": "0x5Ecd8cCA5db51Dfb5879438a81A548A46AC2f45f",
    "contractAddress": "0x241cE5F30de4c60fD2bFe5bCe8b7c96b6421A1Fd",
    "transactionIndex": 27,
    "gasUsed": "318363",
    "logsBloom": "0x00000000000000000000000000000000000000080000000000800000000000000000000000002000000000000002000000000000000000000000000000000000000000000000000000000000000800000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000408000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbc15928f97cc17292b0394bcbc21392080b6d13180bd0d9e44a2e4e68b4efe92",
    "transactionHash": "0x776afd52e0f566ea3896b1e11725579e22f5bcc76e3f06439440e0b9fb9d8f83",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 7777419,
        "transactionHash": "0x776afd52e0f566ea3896b1e11725579e22f5bcc76e3f06439440e0b9fb9d8f83",
        "address": "0x241cE5F30de4c60fD2bFe5bCe8b7c96b6421A1Fd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005ecd8cca5db51dfb5879438a81a548a46ac2f45f"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0xbc15928f97cc17292b0394bcbc21392080b6d13180bd0d9e44a2e4e68b4efe92"
      }
    ],
    "blockNumber": 7777419,
    "cumulativeGasUsed": "11058264",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4C3864Ab2a767874D9B114F9a9642F67805F2108"
  ],
  "numDeployments": 1,
  "solcInputHash": "d3866c0cf12eab5d294ffad69915d31b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ValueChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Commodity.sol\":\"Commodity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Commodity.sol\":{\"content\":\"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IRegistry {\\n    function addCommodityValue(uint256 value) external;\\n    function updateCommodityValue(uint256 newValue) external;\\n\\n    function hasAttribute(address account, uint256 attributeTypeID)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAttributeValue(address account, uint256 attributeTypeID)\\n        external\\n        view\\n        returns (uint256);\\n    function countAttributeTypes() external view returns (uint256);\\n    function getAttributeTypeID(uint256 index) external view returns (uint256);\\n}\\n\\ncontract Commodity is Ownable {\\n  address private _registryAddress;\\n  uint256 private _value;\\n\\n  // Emitted when the stored value changes\\n  event ValueChanged(uint256 newValue);\\n\\n  constructor(address registryAddress) {\\n    _registryAddress = registryAddress;\\n  }\\n\\n  // Stores a new value in the contract\\n  function store(uint256 value) public onlyOwner {\\n    _value = value;\\n    IRegistry(_registryAddress).addCommodityValue(_value);\\n    emit ValueChanged(value);\\n  }\\n\\n  function update(uint256 newValue) public onlyOwner {\\n    _value = newValue;\\n    IRegistry(_registryAddress).updateCommodityValue(newValue);\\n    emit ValueChanged(newValue);\\n  }\\n\\n  // Reads the last stored value\\n  function retrieve() public view returns (uint256) {\\n    return _value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c1e6c92b474851c48c0080c0075da2b8f5fdd868046359bd93d98a28b729a46\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104d23803806104d283398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b6103e6806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec1146100675780636057361d1461007d578063715018a61461009257806382ab890a1461009a5780638da5cb5b146100ad578063f2fde38b146100c8575b600080fd5b6002546040519081526020015b60405180910390f35b61009061008b366004610332565b6100db565b005b6100906101ae565b6100906100a8366004610332565b6101e4565b6000546040516001600160a01b039091168152602001610074565b6100906100d636600461034b565b610247565b6000546001600160a01b0316331461010e5760405162461bcd60e51b81526004016101059061037b565b60405180910390fd5b6002819055600154604051630554099760e41b8152600481018390526001600160a01b03909116906355409970906024015b600060405180830381600087803b15801561015a57600080fd5b505af115801561016e573d6000803e3d6000fd5b505050507f93fe6d397c74fdf1402a8b72e47b68512f0510d7b98a4bc4cbdf6ac7108b3c59816040516101a391815260200190565b60405180910390a150565b6000546001600160a01b031633146101d85760405162461bcd60e51b81526004016101059061037b565b6101e260006102e2565b565b6000546001600160a01b0316331461020e5760405162461bcd60e51b81526004016101059061037b565b60028190556001546040516001627a473760e11b03198152600481018390526001600160a01b039091169063ff0b719290602401610140565b6000546001600160a01b031633146102715760405162461bcd60e51b81526004016101059061037b565b6001600160a01b0381166102d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610105565b6102df816102e2565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561034457600080fd5b5035919050565b60006020828403121561035d57600080fd5b81356001600160a01b038116811461037457600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220d4c048154587f209158ea60c6b67f524de52fa8d3eaa3ab32274e4b2bb25d92164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec1146100675780636057361d1461007d578063715018a61461009257806382ab890a1461009a5780638da5cb5b146100ad578063f2fde38b146100c8575b600080fd5b6002546040519081526020015b60405180910390f35b61009061008b366004610332565b6100db565b005b6100906101ae565b6100906100a8366004610332565b6101e4565b6000546040516001600160a01b039091168152602001610074565b6100906100d636600461034b565b610247565b6000546001600160a01b0316331461010e5760405162461bcd60e51b81526004016101059061037b565b60405180910390fd5b6002819055600154604051630554099760e41b8152600481018390526001600160a01b03909116906355409970906024015b600060405180830381600087803b15801561015a57600080fd5b505af115801561016e573d6000803e3d6000fd5b505050507f93fe6d397c74fdf1402a8b72e47b68512f0510d7b98a4bc4cbdf6ac7108b3c59816040516101a391815260200190565b60405180910390a150565b6000546001600160a01b031633146101d85760405162461bcd60e51b81526004016101059061037b565b6101e260006102e2565b565b6000546001600160a01b0316331461020e5760405162461bcd60e51b81526004016101059061037b565b60028190556001546040516001627a473760e11b03198152600481018390526001600160a01b039091169063ff0b719290602401610140565b6000546001600160a01b031633146102715760405162461bcd60e51b81526004016101059061037b565b6001600160a01b0381166102d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610105565b6102df816102e2565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561034457600080fd5b5035919050565b60006020828403121561035d57600080fd5b81356001600160a01b038116811461037457600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220d4c048154587f209158ea60c6b67f524de52fa8d3eaa3ab32274e4b2bb25d92164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/Commodity.sol:Commodity",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7900,
        "contract": "contracts/Commodity.sol:Commodity",
        "label": "_registryAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7902,
        "contract": "contracts/Commodity.sol:Commodity",
        "label": "_value",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}